{{!--
  This template renders the desktop menu.
--}}

<div
  class="f-desktop-top-bar"
  x-data="desktopMenu()"
  x-ref="desktop_menu"
  x-init="initScrollFeature('{{#is "post"}}is-post{{/is}}')"
>
  <div class="f-desktop-top-bar__wrapper">
    {{> logo logo_class="in-desktop-top-bar"}}
    <div
      class="f-desktop-top-bar__middle-wrapper"
      :class="{ 'title-displayed': isPostTitleVisible() }"
    >
      <div
        class="f-desktop-top-bar__middle top-bar-menu"
        :class="{ 'hidden': isPostTitleVisible() }"
      >
            <nav
                    class="f-desktop-navigation__list more"
                    role="navigation"
                    aria-label="{{t "Secondary links"}}"
            >

                <div class="submenu" style="margin-left:20%;">
                    <a aria-haspopup="true" class="nav-no-show">
                        <span>{{t "Who we are"}}</span>
                    </a>
                    <ul class="f-submenu secondary">
                        <li class="nav-principles{{#if current}} nav-current{{/if}}">
                            <a href="/principles">
                                <span>{{ t "Our Principles"}}</span>
                            </a>
                        </li>
                        <li class="nav-our-cooperative{{#if current}} nav-current{{/if}}">
                            <a href="/our-cooperative">
                                <span>{{t "Cooperative"}}</span>
                            </a>
                        </li>
                        <li class="nav-team{{#if current}} nav-current{{/if}}">
                            <a href="/team">
                                <span>{{t "Team"}}</span>
                            </a>
                        </li>
                        <li class="nav-tag-partners{{#if current}} nav-current{{/if}}">
                            <a href="/tag/partners">
                                <span>{{t "Partners"}}</span>
                            </a>
                        </li>
                    </ul>
                </div>

                <div class="submenu">
                    <a href="/who-we-serve" class="nav-standard" >
                        <span>{{ t "Who we serve"}}</span>
                    </a>
                </div>
                <div class="submenu" >
                    <a href="/tags/" class="nav-standard">
                        <span>{{t "Blog"}}</span>
                    </a>
                </div>
            </nav>
      </div>
      {{#is "post"}}
        <div
          class="f-desktop-top-bar__middle article-title"
          :class="{ 'visible': isPostTitleVisible() }"
        >
          {{#post}}
            <div class="f-desktop-top-bar__article-title-wrapper">
              <p class="f-desktop-top-bar__article-title" aria-hidden="true">
                {{title}}
              </p>
            </div>
          {{/post}}
        </div>
      {{/is}}
    </div>
    <div class="f-desktop-top-bar__actions">

        <nav
          role="navigation"
          aria-label="{{t "Social links"}}"
          class="horizontal-centered-items"
        >
            <a
                    href="{{@site.url}}/#early-access"
                    class="f-button in-desktop-top-bar"
            >
                {{t "Get Early Access"}}
            </a>
        </nav>
      {{> search
        input_id="search-desktop-top-bar"
        search_container_class="f-desktop-top-bar-search"
      }}
    </div>
  </div>
</div>

<script>
  window.desktopMenu = () => {
    return {
      showPostTitle: false,
      menuHeight: 0,
      lastScrollTop: 0,
      ticking: false,
      postTitle: null,
      threshold: 5,
      minAbsoluteScroll: 0,
      lastDirectionChangePosition: 0,
      isPostTitleVisible() { return this.showPostTitle === true },
      initScrollFeature(isPost) {
        if (isPost && !this.isMobile()) {
          this.menuHeight = this.$refs.desktop_menu.offsetHeight
          this.postTitle = document.querySelector('.js-article-title')
          window.addEventListener(
            'scroll',
            this.handleScroll.bind(this),
            { passive: true }
          )
        }
      },
      handleScroll() {
        this.requestTick()
      },
      requestTick() {
        if (!this.ticking) {
          requestAnimationFrame(this.update.bind(this))
        }
        this.ticking = true
      },
      update() {
        const pos = window.pageYOffset
        const trigger = this.postTitle.getBoundingClientRect().top + pos
        const triggerOffset = this.postTitle.offsetHeight

        if (this.lastScrollTop >= trigger + triggerOffset) {
          if (this.scrolledUp(pos)) {
            if (this.minAbsoluteScroll >= this.threshold) {
              this.showPostTitle = false
            }
          } else {
            if (this.minAbsoluteScroll >= this.threshold) {
              this.showPostTitle = true
            }
          }
        } else {
          this.showPostTitle = false
        }

        this.lastScrollTop = window.pageYOffset
        this.ticking = false
      },
      scrolledUp(currentScrollPosition) {
        let up = false

        if (currentScrollPosition < this.lastScrollTop) {
          up = true
        }

        this.minAbsoluteScroll = Math.abs(
          currentScrollPosition - this.lastScrollTop
        )

        return up
      },
      isMobile() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
      }
    }
  }
</script>
